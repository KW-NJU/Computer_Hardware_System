
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Computer_System(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,


	//////////// IR //////////
	input 		          		IRDA_RXD,
	output		          		IRDA_TXD
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

	wire [31:0] eip;
	wire [31:0] temp;
	wire [31:0] xd;
	wire encode,finalflag;
	wire [31:0] endeip;
	wire [31:0] initialeip;
	wire [127:0] finalres;
	wire [31:0] finallength;
	wire [31:0] prognum;
	wire [31:0] prognumres;
	wire [31:0] res;
	wire [31:0] xjudge;
	wire [4:0] hexhour;
	wire [5:0] hexmin;
	wire [4:0] rtt;
	wire [4:0] rt;
	wire clk_1s;
	wire [31:0] curnum;
	wire [1:0] show_time;
	wire clear,watch,ret0;
	alarm_clk(show_time,watch,ret0,CLOCK_50,hexhour,hexmin,HEX5,HEX4,HEX3,HEX2,HEX1,HEX0);
	clockedit clk1(CLOCK2_50, clk_1s);
	CPU cpu(CLOCK2_50, CLOCK_50,encode, endeip, initialeip, finalres, finalflag, finallength, prognum);
	os(curnum,finalres, finallength, finalflag,
	prognum, initialeip, endeip, encode,
	CLOCK_50,PS2_CLK,PS2_DAT,SW[0],VGA_HS,VGA_VS,VGA_R,VGA_G,VGA_B,VGA_SYNC_N,VGA_CLK,VGA_BLANK_N,
	LEDR[9:0],show_time,hexhour,hexmin,ret0,watch);

//=======================================================
//  Structural coding
//=======================================================



endmodule
